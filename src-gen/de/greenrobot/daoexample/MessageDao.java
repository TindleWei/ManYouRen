package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE.
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Avatar = new Property(1, String.class, "avatar", false, "AVATAR");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property ContentType = new Property(5, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property MessageType = new Property(6, String.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property ToUserId = new Property(7, Long.class, "toUserId", false, "TO_USER_ID");
        public final static Property Length = new Property(8, String.class, "length", false, "LENGTH");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AVATAR' TEXT," + // 1: avatar
                "'USER_NAME' TEXT," + // 2: userName
                "'TIME' INTEGER," + // 3: time
                "'CONTENT' TEXT," + // 4: content
                "'CONTENT_TYPE' TEXT," + // 5: contentType
                "'MESSAGE_TYPE' TEXT," + // 6: messageType
                "'TO_USER_ID' INTEGER," + // 7: toUserId
                "'LENGTH' TEXT);"); // 8: length
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(6, contentType);
        }
 
        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(7, messageType);
        }
 
        Long toUserId = entity.getToUserId();
        if (toUserId != null) {
            stmt.bindLong(8, toUserId);
        }
 
        String length = entity.getLength();
        if (length != null) {
            stmt.bindString(9, length);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contentType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // messageType
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // toUserId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // length
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContentType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessageType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToUserId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setLength(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
