package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SessionId = new Property(1, String.class, "sessionId", false, "SESSION_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property SignText = new Property(3, String.class, "signText", false, "SIGN_TEXT");
        public final static Property Birthday = new Property(4, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Homeland = new Property(6, String.class, "homeland", false, "HOMELAND");
        public final static Property Residence = new Property(7, String.class, "residence", false, "RESIDENCE");
        public final static Property Want2Go = new Property(8, String.class, "want2Go", false, "WANT2_GO");
        public final static Property School = new Property(9, String.class, "school", false, "SCHOOL");
        public final static Property BeenThere = new Property(10, String.class, "beenThere", false, "BEEN_THERE");
        public final static Property Frequency = new Property(11, Integer.class, "frequency", false, "FREQUENCY");
        public final static Property Magazine = new Property(12, String.class, "magazine", false, "MAGAZINE");
        public final static Property HobbyText = new Property(13, String.class, "hobbyText", false, "HOBBY_TEXT");
        public final static Property Vehicle = new Property(14, String.class, "vehicle", false, "VEHICLE");
        public final static Property Profession = new Property(15, String.class, "profession", false, "PROFESSION");
        public final static Property Company = new Property(16, String.class, "company", false, "COMPANY");
        public final static Property Md5 = new Property(17, String.class, "md5", false, "MD5");
        public final static Property Avatar0 = new Property(18, String.class, "avatar0", false, "AVATAR0");
        public final static Property Avatar1 = new Property(19, String.class, "avatar1", false, "AVATAR1");
        public final static Property Avatar2 = new Property(20, String.class, "avatar2", false, "AVATAR2");
        public final static Property Avatar3 = new Property(21, String.class, "avatar3", false, "AVATAR3");
        public final static Property Email = new Property(22, String.class, "email", false, "EMAIL");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SESSION_ID' TEXT," + // 1: sessionId
                "'USER_NAME' TEXT," + // 2: userName
                "'SIGN_TEXT' TEXT," + // 3: signText
                "'BIRTHDAY' INTEGER," + // 4: birthday
                "'GENDER' INTEGER," + // 5: gender
                "'HOMELAND' TEXT," + // 6: homeland
                "'RESIDENCE' TEXT," + // 7: residence
                "'WANT2_GO' TEXT," + // 8: want2Go
                "'SCHOOL' TEXT," + // 9: school
                "'BEEN_THERE' TEXT," + // 10: beenThere
                "'FREQUENCY' INTEGER," + // 11: frequency
                "'MAGAZINE' TEXT," + // 12: magazine
                "'HOBBY_TEXT' TEXT," + // 13: hobbyText
                "'VEHICLE' TEXT," + // 14: vehicle
                "'PROFESSION' TEXT," + // 15: profession
                "'COMPANY' TEXT," + // 16: company
                "'MD5' TEXT," + // 17: md5
                "'AVATAR0' TEXT," + // 18: avatar0
                "'AVATAR1' TEXT," + // 19: avatar1
                "'AVATAR2' TEXT," + // 20: avatar2
                "'AVATAR3' TEXT," + // 21: avatar3
                "'EMAIL' TEXT);"); // 22: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String signText = entity.getSignText();
        if (signText != null) {
            stmt.bindString(4, signText);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(5, birthday.getTime());
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        String homeland = entity.getHomeland();
        if (homeland != null) {
            stmt.bindString(7, homeland);
        }
 
        String residence = entity.getResidence();
        if (residence != null) {
            stmt.bindString(8, residence);
        }
 
        String want2Go = entity.getWant2Go();
        if (want2Go != null) {
            stmt.bindString(9, want2Go);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(10, school);
        }
 
        String beenThere = entity.getBeenThere();
        if (beenThere != null) {
            stmt.bindString(11, beenThere);
        }
 
        Integer frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindLong(12, frequency);
        }
 
        String magazine = entity.getMagazine();
        if (magazine != null) {
            stmt.bindString(13, magazine);
        }
 
        String hobbyText = entity.getHobbyText();
        if (hobbyText != null) {
            stmt.bindString(14, hobbyText);
        }
 
        String vehicle = entity.getVehicle();
        if (vehicle != null) {
            stmt.bindString(15, vehicle);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(16, profession);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(17, company);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(18, md5);
        }
 
        String avatar0 = entity.getAvatar0();
        if (avatar0 != null) {
            stmt.bindString(19, avatar0);
        }
 
        String avatar1 = entity.getAvatar1();
        if (avatar1 != null) {
            stmt.bindString(20, avatar1);
        }
 
        String avatar2 = entity.getAvatar2();
        if (avatar2 != null) {
            stmt.bindString(21, avatar2);
        }
 
        String avatar3 = entity.getAvatar3();
        if (avatar3 != null) {
            stmt.bindString(22, avatar3);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(23, email);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // signText
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // homeland
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // residence
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // want2Go
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // school
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // beenThere
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // frequency
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // magazine
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // hobbyText
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // vehicle
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // profession
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // company
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // md5
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // avatar0
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // avatar1
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // avatar2
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // avatar3
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSignText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setHomeland(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResidence(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWant2Go(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSchool(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBeenThere(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFrequency(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setMagazine(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHobbyText(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVehicle(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProfession(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCompany(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMd5(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAvatar0(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAvatar1(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAvatar2(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAvatar3(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setEmail(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
